/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package UI;

import dao.AdvancePaymentDAO;
import dao.EmployeeDAO;
import entity.AdvancePayment;
import entity.Employee;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utils.MsgBox;
import utils.XDate;

/**
 *
 * @author caube
 */
public class AdvancePaymentJDialog extends javax.swing.JDialog implements CrudController<AdvancePayment> {

    private AdvancePaymentDAO advancePaymentDAO = new AdvancePaymentDAO();
    private EmployeeDAO employeeDAO = new EmployeeDAO();
    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

    public AdvancePaymentJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        sdf.setLenient(false);
        fillTable(advancePaymentDAO.selectAll());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPayment = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtAdvAmout = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtID = new javax.swing.JTextField();
        txtAdvDate = new javax.swing.JTextField();
        txtEmpID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Mã Nhân Viên");

        tblPayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null},
                {"", null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Tiền ứng", "Ngày ứng", "Mã nhân viên"
            }
        ));
        tblPayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPaymentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPayment);

        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setText("Làm mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtAdvAmout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAdvAmoutActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("ID");

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("AdvancePayment");

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtID.setEditable(false);
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Tiền ứng");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Ngày ứng");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txtAdvAmout, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtAdvDate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(209, 209, 209)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(51, 51, 51))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnSearch)
                                        .addGap(243, 243, 243))))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(282, 282, 282)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAdvAmout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAdvDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave)
                            .addComponent(btnUpdate))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClear)
                            .addComponent(btnDelete))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)
                        .addGap(30, 30, 30))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblPaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPaymentMouseClicked
        int index = tblPayment.getSelectedRow();
        if (index != -1) {
            AdvancePayment advancePayment = advancePaymentDAO.selectAll().get(index);

            txtID.setText(advancePayment.getId() + "");
            txtAdvAmout.setText(advancePayment.getAdvAmount() + "");
            txtAdvDate.setText(advancePayment.getDateAdv() + "");
            txtEmpID.setText(advancePayment.getEmployee().getId() + "");
        }
    }//GEN-LAST:event_tblPaymentMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            if (validateForm()) {
                Employee employee = employeeDAO.selectByID(txtEmpID.getText().trim());
                java.sql.Date date = null;
                try {
                    date = java.sql.Date.valueOf(txtAdvDate.getText().trim());
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                }

                AdvancePayment adv = new AdvancePayment();
                adv.setAdvAmount(Double.parseDouble(txtAdvAmout.getText()));
                adv.setDateAdv(date);
                adv.setEmployee(employee);
                advancePaymentDAO.insert(adv);
                fillTable(advancePaymentDAO.selectAll());
                resetForm();
                JOptionPane.showMessageDialog(this, "Đã lưu thành công");
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Mã nhân viên ko tồn tại");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int index = tblPayment.getSelectedRow();
        if (index != -1) {
            if (validateForm()) {
                Employee employee = employeeDAO.selectByID(txtEmpID.getText().trim());
                AdvancePayment advancePayment = advancePaymentDAO.selectAll().get(index);
                java.sql.Date date = null;
                try {
                    date = java.sql.Date.valueOf(txtAdvDate.getText().trim());
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                }

                advancePayment.setAdvAmount(Double.valueOf(txtAdvAmout.getText().trim()));
                advancePayment.setDateAdv(date);
                advancePayment.setEmployee(employee);

                advancePaymentDAO.update(advancePayment);
                fillTable(advancePaymentDAO.selectAll());
                resetForm();
                JOptionPane.showMessageDialog(this, "Đã cập nhật thành công");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng muốn cập nhật", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        resetForm();
        fillTable(advancePaymentDAO.selectAll());
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtAdvAmoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAdvAmoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAdvAmoutActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int index = tblPayment.getSelectedRow();
        if (index != -1) {
            AdvancePayment advancePayment = advancePaymentDAO.selectAll().get(index);
            advancePaymentDAO.delete(advancePayment.getId() + "");
            fillTable(advancePaymentDAO.selectAll());
            JOptionPane.showMessageDialog(this, "Đã xóa thành công");
            resetForm();
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng muốn cập nhật", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
        this.searchEntity();
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        this.searchEntity();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (txtSearch.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Chưa nhập thông tin", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            List<AdvancePayment> list = new ArrayList<>();
            for (AdvancePayment i : advancePaymentDAO.selectByKeyWord(txtSearch.getText())) {
                if (txtSearch.getText().trim().toLowerCase().equals(i.getEmployee().getId().toLowerCase())) {
                    list.add(i);
                }
            }
            fillTable(list);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdvancePaymentJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdvancePaymentJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdvancePaymentJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdvancePaymentJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AdvancePaymentJDialog dialog = new AdvancePaymentJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPayment;
    private javax.swing.JTextField txtAdvAmout;
    private javax.swing.JTextField txtAdvDate;
    private javax.swing.JTextField txtEmpID;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    AdvancePaymentDAO dao = new AdvancePaymentDAO();

    @Override
    public AdvancePayment getEntityFromForm() {
        int rowIndex = tblPayment.getSelectedRow();
        int colIndex = 0;
        Integer id = (Integer) tblPayment.getValueAt(rowIndex, colIndex);
//        return dao.getById(id);
        return null;
    }

    @Override
    public void setEntityToForm(AdvancePayment entity) {
        txtID.setText(Integer.toString(entity.getId()));
        txtAdvAmout.setText(Double.toString(entity.getAdvAmount()));
        txtAdvDate.setText(XDate.toString(entity.getDateAdv(), "yyyy-MM-dd"));
        txtEmpID.setText(entity.getEmployee().getId());
    }

    @Override
    public void fillEntityListOnTable() {
        List<entity.AdvancePayment> list = dao.selectAll();
        this.showListOnTable(list);
    }

    @Override
    public AdvancePayment getEntityFromSelectedRow() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void initialize() {
        setLocationRelativeTo(null);
        this.fillEntityListOnTable();
    }

    @Override
    public void createEntity() {
        try {
            if (validateForm()) {
                Employee employee = employeeDAO.selectByID(txtEmpID.getText().trim());
                java.sql.Date date = null;
                try {
                    date = java.sql.Date.valueOf(txtAdvDate.getText().trim());
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                }

                AdvancePayment adv = new AdvancePayment();
                adv.setAdvAmount(Double.parseDouble(txtAdvAmout.getText()));
                adv.setDateAdv(date);
                adv.setEmployee(employee);
                advancePaymentDAO.insert(adv);
                fillTable(advancePaymentDAO.selectAll());
                resetForm();
                JOptionPane.showMessageDialog(this, "Đã lưu thành công");
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Mã nhân viên ko tồn tại");
        }
    }

    @Override
    public void updateEntity() {
        int index = tblPayment.getSelectedRow();
        if (index != -1) {
            if (validateForm()) {
                Employee employee = employeeDAO.selectByID(txtEmpID.getText().trim());
                AdvancePayment advancePayment = advancePaymentDAO.selectAll().get(index);
                java.sql.Date date = null;
                try {
                    date = java.sql.Date.valueOf(txtAdvDate.getText().trim());
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                }

                advancePayment.setAdvAmount(Double.valueOf(txtAdvAmout.getText().trim()));
                advancePayment.setDateAdv(date);
                advancePayment.setEmployee(employee);

                advancePaymentDAO.update(advancePayment);
                fillTable(advancePaymentDAO.selectAll());
                resetForm();
                JOptionPane.showMessageDialog(this, "Đã cập nhật thành công");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng muốn cập nhật", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void deleteEntity() {
        int index = tblPayment.getSelectedRow();
        if (index != -1) {
            AdvancePayment advancePayment = advancePaymentDAO.selectAll().get(index);
            advancePaymentDAO.delete(advancePayment.getId() + "");
            fillTable(advancePaymentDAO.selectAll());
            JOptionPane.showMessageDialog(this, "Đã xóa thành công");
            resetForm();
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng muốn cập nhật", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void editEntity() {
        
    }

    @Override
    public void resetForm() {
        txtID.setText("");
        txtAdvAmout.setText("");
        txtAdvDate.setText("");
        txtEmpID.setText("");
        tblPayment.clearSelection();
    }

    private void showListOnTable(List<entity.AdvancePayment> list) {
        DefaultTableModel model = (DefaultTableModel) tblPayment.getModel();
        model.setRowCount(0);
        for (entity.AdvancePayment e : list) {
            Object[] row = {e.getId(), e.getAdvAmount(), e.getDateAdv(), e.getEmployee()};
            model.addRow(row);
        }
    }

    public boolean validateForm() {
        if (txtAdvAmout.getText().trim().isEmpty()
                || txtAdvDate.getText().trim().isEmpty() || txtEmpID.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không được để trống thông tin", "Lỗi", 2);
            return false;
        }

        try {
            java.sql.Date date = java.sql.Date.valueOf(txtAdvDate.getText().trim());
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Sai định dạng ngày", "Lỗi", 2);
            return false;
        }

        try {
            Double.valueOf(txtAdvAmout.getText().trim());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Tiền ứng sai định dạng", "Lỗi", 2);
            return false;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Tiền ứng sai định dạng", "Lỗi", 2);
            System.out.println(e);
            return false;
        }
        return true;
    }

    public void fillTable(List<AdvancePayment> list) {
        DefaultTableModel tableModel = (DefaultTableModel) tblPayment.getModel();
        tableModel.setRowCount(0);
        list.forEach(i -> tableModel.addRow(new Object[]{
            i.getId(), i.getAdvAmount(), i.getDateAdv(), i.getEmployee().getId()
        }));
    }
    
     private void searchEntity() {
        List<AdvancePayment> list = new ArrayList<>();
        for (AdvancePayment adv : advancePaymentDAO.selectByKeyWord(txtSearch.getText())) {
            list.add(adv);
        }
        fillTable(list);

//        if (txtSearch.getText().trim().isEmpty()) {
//            JOptionPane.showMessageDialog(this, "Chưa nhập thông tin", "Lỗi", JOptionPane.ERROR_MESSAGE);
//        } else {
//            List<AdvancePayment> list = new ArrayList<>();
//            for (AdvancePayment i : advancePaymentDAO.selectAll()) {
//                if (txtSearch.getText().trim().toLowerCase().equals(i.getEmployee().getId().toLowerCase())) {
//                    list.add(i);
//                }
//            }
//            fillTable(list);
//        }
    }

}
